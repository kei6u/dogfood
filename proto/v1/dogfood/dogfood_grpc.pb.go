// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package dogfoodpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// DogFoodServiceClient is the client API for DogFoodService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DogFoodServiceClient interface {
	// CreateRecord create a record who ate what, when, and how much.
	CreateRecord(ctx context.Context, in *CreateRecordRequest, opts ...grpc.CallOption) (*Record, error)
	// ListRecords list up all records.
	ListRecords(ctx context.Context, in *ListRecordsRequest, opts ...grpc.CallOption) (*ListRecordsResponse, error)
}

type dogFoodServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDogFoodServiceClient(cc grpc.ClientConnInterface) DogFoodServiceClient {
	return &dogFoodServiceClient{cc}
}

func (c *dogFoodServiceClient) CreateRecord(ctx context.Context, in *CreateRecordRequest, opts ...grpc.CallOption) (*Record, error) {
	out := new(Record)
	err := c.cc.Invoke(ctx, "/dogfoodpb.v1.DogFoodService/CreateRecord", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dogFoodServiceClient) ListRecords(ctx context.Context, in *ListRecordsRequest, opts ...grpc.CallOption) (*ListRecordsResponse, error) {
	out := new(ListRecordsResponse)
	err := c.cc.Invoke(ctx, "/dogfoodpb.v1.DogFoodService/ListRecords", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DogFoodServiceServer is the server API for DogFoodService service.
// All implementations should embed UnimplementedDogFoodServiceServer
// for forward compatibility
type DogFoodServiceServer interface {
	// CreateRecord create a record who ate what, when, and how much.
	CreateRecord(context.Context, *CreateRecordRequest) (*Record, error)
	// ListRecords list up all records.
	ListRecords(context.Context, *ListRecordsRequest) (*ListRecordsResponse, error)
}

// UnimplementedDogFoodServiceServer should be embedded to have forward compatible implementations.
type UnimplementedDogFoodServiceServer struct {
}

func (UnimplementedDogFoodServiceServer) CreateRecord(context.Context, *CreateRecordRequest) (*Record, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRecord not implemented")
}
func (UnimplementedDogFoodServiceServer) ListRecords(context.Context, *ListRecordsRequest) (*ListRecordsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListRecords not implemented")
}

// UnsafeDogFoodServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DogFoodServiceServer will
// result in compilation errors.
type UnsafeDogFoodServiceServer interface {
	mustEmbedUnimplementedDogFoodServiceServer()
}

func RegisterDogFoodServiceServer(s grpc.ServiceRegistrar, srv DogFoodServiceServer) {
	s.RegisterService(&DogFoodService_ServiceDesc, srv)
}

func _DogFoodService_CreateRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRecordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DogFoodServiceServer).CreateRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dogfoodpb.v1.DogFoodService/CreateRecord",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DogFoodServiceServer).CreateRecord(ctx, req.(*CreateRecordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DogFoodService_ListRecords_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRecordsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DogFoodServiceServer).ListRecords(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dogfoodpb.v1.DogFoodService/ListRecords",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DogFoodServiceServer).ListRecords(ctx, req.(*ListRecordsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DogFoodService_ServiceDesc is the grpc.ServiceDesc for DogFoodService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DogFoodService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "dogfoodpb.v1.DogFoodService",
	HandlerType: (*DogFoodServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateRecord",
			Handler:    _DogFoodService_CreateRecord_Handler,
		},
		{
			MethodName: "ListRecords",
			Handler:    _DogFoodService_ListRecords_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/v1/dogfood/dogfood.proto",
}
